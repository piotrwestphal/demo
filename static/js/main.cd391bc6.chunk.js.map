{"version":3,"sources":["main/Dashboard.tsx","custom.theme.ts","provider/data/data.provider.ts","core/fetch.utils.ts","core/api-urls.ts","provider/auth/auth.provider.ts","Posts.tsx","App.tsx","provider/providers.factory.ts","provider/auth/fake-auth.provider.ts","provider/auth/no-auth.provider.ts","provider/data/fake-data.provider.ts","reportWebVitals.ts","index.tsx"],"names":["Dashboard","Card","CardHeader","title","CardContent","customTheme","defaultTheme","palette","primary","deepPurple","secondary","green","typography","fontFamily","join","jsonServerProvider","baseHeaders","API_V1","process","AUTH_URL","login","url","body","username","password","fetch","method","JSON","stringify","headers","then","res","ok","json","Promise","reject","token","localStorage","setItem","logout","removeItem","resolve","checkError","status","checkAuth","getItem","getPermissions","getIdentity","id","fullName","PostList","props","List","Datagrid","rowClick","TextField","source","ReferenceField","reference","EditButton","PostEdit","Edit","SimpleForm","TextInput","ReferenceInput","SelectInput","optionText","multiline","App","env","authProvider","dataProvider","fakeDataProvider","users","name","email","address","street","suite","city","zipcode","geo","lat","lng","phone","website","company","catchPhrase","bs","providersFactory","Admin","theme","dashboard","Resource","list","edit","ListGuesser","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd391bc6.chunk.js","sourcesContent":["import { Card, CardContent, CardHeader } from '@material-ui/core'\nimport * as React from 'react'\n\nexport const Dashboard = () => (\n  <Card>\n    <CardHeader title=\"Welcome to the administration\" />\n    <CardContent>Lorem ipsum sic dolor amet...</CardContent>\n  </Card>\n)\n","import { defaultTheme } from 'react-admin'\nimport { deepPurple, green } from '@material-ui/core/colors'\n\nexport const customTheme = {\n  ...defaultTheme,\n  palette: {\n    primary: deepPurple,\n    secondary: green,\n  },\n  typography: {\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n  },\n}\n","import jsonServerProvider from 'ra-data-json-server'\n\nexport default () => jsonServerProvider('https://jsonplaceholder.typicode.com')\n","const baseHeaders: HeadersInit = {\n  'Content-Type': 'application/json',\n}\n\n// const authHeaders: (token: string) => HeadersInit = (token: string) => ({\n//   ...baseHeaders,\n//   Authorization: `Bearer ${token}`,\n// })\n\nexport const post = <T, K>(url: string, body: K) =>\n  fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: baseHeaders,\n  }).then((res) => (res.ok ? (res.json() as Promise<T>) : Promise.reject()))\n","const API_V1 = `${process.env.REACT_APP_API_BASE_URL}/api/v1`\nexport const AUTH_URL = `${API_V1}/Authorization/Authenticate`\nexport const BOOKINGS_URL = `${API_V1}/ticketManagement/Bookings/`\nexport const CUSTOMERS_URL = `${API_V1}/ticketManagement/Customers/`\nexport const EVENTS_URL = `${API_V1}/ticketManagement/Events/`\nexport const SEATS_URL = `${API_V1}/ticketManagement/Seats/`\nexport const TICKETS_URL = `${API_V1}/ticketManagement/Tickets/`\n","import { AuthProvider } from 'react-admin'\nimport { post } from '../../core/fetch.utils'\nimport { AuthDto } from '../../core/dto/auth.dto'\nimport { AUTH_URL } from '../../core/api-urls'\nimport { AuthRequest } from '../../core/request/auth.request'\n\nexport default (): AuthProvider => ({\n  login: ({ username, password }) =>\n    post<AuthDto, AuthRequest>(AUTH_URL, { login: username, password }).then(\n      ({ token }) => {\n        localStorage.setItem('username', username)\n        localStorage.setItem('token', token)\n      },\n    ),\n  logout: () => {\n    localStorage.removeItem('username')\n    localStorage.removeItem('token')\n    return Promise.resolve()\n  },\n  checkError: ({ status }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('username')\n      localStorage.removeItem('token')\n      return Promise.reject()\n    }\n    return Promise.resolve()\n  },\n  checkAuth: () =>\n    localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\n  getPermissions: () => Promise.resolve(),\n  getIdentity: () =>\n    Promise.resolve({\n      id: 'user',\n      fullName: localStorage.getItem('username') as string,\n    }),\n})\n","import * as React from 'react'\nimport {\n  Datagrid,\n  Edit,\n  EditButton,\n  EditProps,\n  List,\n  ReferenceField,\n  ReferenceInput,\n  SelectInput,\n  SimpleForm,\n  TextField,\n  TextInput,\n} from 'react-admin'\nimport { ListProps } from '@material-ui/core'\n\nexport const PostList = (props: ListProps) => (\n  <List {...props}>\n    <Datagrid rowClick=\"edit\">\n      <TextField source=\"id\" />\n      <ReferenceField source=\"userId\" reference=\"users\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n      <TextField source=\"title\" />\n      <EditButton />\n    </Datagrid>\n  </List>\n)\n\nexport const PostEdit = (props: EditProps) => (\n  <Edit {...props}>\n    <SimpleForm>\n      <TextInput source=\"id\" />\n      <ReferenceInput source=\"userId\" reference=\"users\">\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n      <TextInput source=\"title\" />\n      <TextInput multiline source=\"body\" />\n    </SimpleForm>\n  </Edit>\n)\n","import React from 'react'\nimport { Admin, ListGuesser, Resource } from 'react-admin'\nimport { Dashboard } from './main/Dashboard'\nimport { customTheme } from './custom.theme'\nimport { providersFactory } from './provider/providers.factory'\nimport { PostEdit, PostList } from './Posts'\n\nconst App = () => {\n  const { authProvider, dataProvider } = providersFactory(process.env.NODE_ENV)\n  return (\n    <Admin\n      theme={customTheme}\n      dashboard={Dashboard}\n      authProvider={authProvider}\n      dataProvider={dataProvider}\n    >\n      <Resource name=\"posts\" list={PostList} edit={PostEdit} />\n      <Resource name=\"users\" list={ListGuesser} />\n    </Admin>\n  )\n}\n\nexport default App\n","import { AuthProvider, DataProvider } from 'react-admin'\nimport dataProvider from './data/data.provider'\nimport fakeDataProvider from './data/fake-data.provider'\nimport noAuthProvider from './auth/no-auth.provider'\nimport fakeAuthProvider from './auth/fake-auth.provider'\nimport authProvider from './auth/auth.provider'\n\ninterface Providers {\n  readonly authProvider: AuthProvider\n  readonly dataProvider: DataProvider\n}\n\n// TODO: change to real data\nexport const providersFactory = (\n  env: 'development' | 'test' | 'production',\n): Providers => {\n  switch (env) {\n    case 'production':\n      return {\n        authProvider: authProvider(),\n        dataProvider: dataProvider(),\n      }\n    case 'development':\n      return {\n        authProvider: fakeAuthProvider(), // TODO: change to authProvider\n        dataProvider: dataProvider(),\n      }\n    default:\n      return {\n        authProvider: noAuthProvider(),\n        dataProvider: fakeDataProvider(),\n      }\n  }\n}\n","import { AuthProvider } from 'react-admin'\n\nexport default (): AuthProvider => ({\n  login: ({ username }) => {\n    localStorage.setItem('username', username)\n    return Promise.resolve()\n  },\n  logout: () => {\n    localStorage.removeItem('username')\n    return Promise.resolve()\n  },\n  checkError: ({ status }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('username')\n      return Promise.reject()\n    }\n    return Promise.resolve()\n  },\n  checkAuth: () =>\n    localStorage.getItem('username') ? Promise.resolve() : Promise.reject(),\n  getPermissions: () => Promise.resolve(),\n  getIdentity: () =>\n    Promise.resolve({\n      id: 'user',\n      fullName: localStorage.getItem('username') as string,\n    }),\n})\n","import { AuthProvider } from 'react-admin'\n\nexport default (): AuthProvider => ({\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  checkError: () => Promise.resolve(),\n  checkAuth: () => Promise.resolve(),\n  getPermissions: () => Promise.resolve(),\n  getIdentity: () =>\n    Promise.resolve({\n      id: 'no-auth',\n      fullName: 'no-auth',\n    }),\n})\n","import fakeDataProvider from 'ra-data-fakerest'\n\nexport default () =>\n  fakeDataProvider({\n    users: [\n      {\n        id: 1,\n        name: 'Leanne Graham',\n        username: 'Bret',\n        email: 'Sincere@april.biz',\n        address: {\n          street: 'Kulas Light',\n          suite: 'Apt. 556',\n          city: 'Gwenborough',\n          zipcode: '92998-3874',\n          geo: {\n            lat: '-37.3159',\n            lng: '81.1496',\n          },\n        },\n        phone: '1-770-736-8031 x56442',\n        website: 'hildegard.org',\n        company: {\n          name: 'Romaguera-Crona',\n          catchPhrase: 'Multi-layered client-server neural-net',\n          bs: 'harness real-time e-markets',\n        },\n      },\n      {\n        id: 2,\n        name: 'Ervin Howell',\n        username: 'Antonette',\n        email: 'Shanna@melissa.tv',\n        address: {\n          street: 'Victor Plains',\n          suite: 'Suite 879',\n          city: 'Wisokyburgh',\n          zipcode: '90566-7771',\n          geo: {\n            lat: '-43.9509',\n            lng: '-34.4618',\n          },\n        },\n        phone: '010-692-6593 x09125',\n        website: 'anastasia.net',\n        company: {\n          name: 'Deckow-Crist',\n          catchPhrase: 'Proactive didactic contingency',\n          bs: 'synergize scalable supply-chains',\n        },\n      },\n    ],\n  })\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}